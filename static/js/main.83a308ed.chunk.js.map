{"version":3,"sources":["logo.svg","Tuner.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Tuner","React","frequencyValue","setFrequencyValue","states","setStates","currentNote","setNote","className","value","maxValue","minValue","currentValueText","customSegmentStops","needleTransition","needleTransitionDuration","needleHeightRatio","onClick","audioContext","AudioContext","analyser","createAnalyser","voice","Wad","source","tune","Poly","navigator","mediaDevices","getUserMedia","console","log","audio","then","stream","createMediaStreamSource","connect","fftSize","bufferLength","freqBinDataArray","Uint8Array","setInterval","getByteFrequencyData","frequency","reduce","iMax","x","i","arr","sampleRate","musicNote","noteStrings","noteNum","Math","note","round","calculateNote","undefined","add","updatePitch","roundFrequency","toFixed","beginRecording","catch","err","error","style","visibility","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"oMAAe,I,uDC8IAA,MAtIf,WAAgB,MAUgCC,WAAe,KAV/C,mBAULC,EAVK,KAUWC,EAVX,OAWgBF,WAAe,GAX/B,mBAWLG,EAXK,KAWGC,EAXH,OAYmBJ,WAAe,KAZlC,mBAYLK,EAZK,KAYQC,EAZR,KA4GZ,OACI,sBAAKC,UAAY,QAAjB,UACI,8CACA,qBAAKA,UAAY,QAAjB,SACA,cAAC,IAAD,CACIC,MAAOP,EACPQ,SAAU,IACVC,SAAU,EACVC,iBAAkB,sBAClBC,mBAAoB,CAAC,EAAG,IAAK,IAAK,IAAK,IAAK,KAC5CC,iBAAkB,iBAClBC,yBAA0B,IAC1BC,kBAAmB,OAIvB,+CAAkBV,KAGlB,wBAAQW,QAjHhB,WACI,IAAIC,EAAe,IAAIC,aAEvBd,EAAU,GACV,IAAIe,EAAWF,EAAaG,iBACxBC,EAAQ,IAAIC,IAAI,CAACC,OAAS,QAC1BC,EAAO,IAAIF,IAAIG,KAIvB,GAAIC,UAAUC,aAAaC,aAAc,CACrCC,QAAQC,IAAI,2BAEZJ,UAAUC,aAAaC,aADL,CAAEG,OAAO,IAEtBC,MAAK,SAASC,GACEhB,EAAaiB,wBAAwBD,GACvCE,QAAQhB,GAW/B,WAKIA,EAASiB,QAAU,KACnB,IAAIC,EAAelB,EAASiB,QAExBE,EAAmB,IAAIC,WAAWF,GA6BtCG,aA3BiB,WACjBrB,EAASsB,qBAAqBH,GAG9B,IACII,EADsBJ,EAqCbK,QAAO,SAACC,EAAMC,EAAGC,EAAGC,GAAb,OAAqBF,EAAIE,EAAIH,GAAQE,EAAIF,IAAM,IApCvC3B,EAAa+B,WAAW,EAAI7B,EAASiB,SAE7Da,EAqCR,SAAuBP,GAEnB,IAAIQ,EAAc,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAC3EC,EAAgBC,KAAKtB,IAAKY,EAAY,KAAMU,KAAKtB,IAAI,GAA3C,GACVuB,EAAOD,KAAKE,MAAOH,GAAY,GACnC,OAAOD,EAAYG,EAAK,IA1CRE,CAAcb,GAE1BpC,OADakD,GAAbP,EACQ,MAGAA,GAKZzB,EAAKiC,IAAIpC,GACTG,EAAKkC,cAGL,IAAIC,EAAiBjB,EAAUkB,QAAQ,GACvC1D,EAAkByD,KAKM,IA9ChBE,MAEHC,OAAM,SAASC,GACZlC,QAAQmC,MAAM,UAAYD,WAGlClC,QAAQmC,MAAM,wCAyFezD,UAAY,QAAQ0D,MAAO,CAACC,WAAsB,GAAV/D,EAAc,UAAY,UAA3F,uBC1GGgE,MAxBf,WACE,OACE,qBAAK5D,UAAU,MAAf,SAEE,wBAAQA,UAAU,aAAlB,SAGE,cAAC,EAAD,SCAF6D,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BlD,UAAUmD,cACPC,SAASH,GACT3C,MAAK,SAAC+C,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf1D,UAAUmD,cAAcQ,YAI1BxD,QAAQC,IACN,+GAKE8C,GAAUA,EAAOU,UACnBV,EAAOU,SAASP,KAMlBlD,QAAQC,IAAI,sCAGR8C,GAAUA,EAAOW,WACnBX,EAAOW,UAAUR,WAO5BjB,OAAM,SAACE,GACNnC,QAAQmC,MAAM,4CAA6CA,MC9FjE,IAYewB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB1D,MAAK,YAAkD,IAA/C2D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFSnB,SAAkBxB,GACvB,GAA6C,kBAAmBlD,UAAW,CAGzE,GADkB,IAAI2E,IAAIC,mBAAwBhC,OAAOC,SAASgC,MACpDC,SAAWlC,OAAOC,SAASiC,OAIvC,OAGFlC,OAAOmC,iBAAiB,QAAQ,WAC9B,IAAM9B,EAAK,UAAM2B,mBAAN,sBAEPlC,IAgEV,SAAiCO,EAAOC,GAEtC8B,MAAM/B,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5B3E,MAAK,SAAC4E,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CtF,UAAUmD,cAAcoC,MAAMjF,MAAK,SAAC+C,GAClCA,EAAamC,aAAalF,MAAK,WAC7BsC,OAAOC,SAAS4C,eAKpBzC,EAAgBC,EAAOC,MAG1Bd,OAAM,WACLjC,QAAQC,IAAI,oEAtFVsF,CAAwBzC,EAAOC,GAI/BlD,UAAUmD,cAAcoC,MAAMjF,MAAK,WACjCH,QAAQC,IACN,+GAMJ4C,EAAgBC,EAAOC,OE/B/ByC,GAKA7B,M","file":"static/js/main.83a308ed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import './App.css';\r\nimport './index.css';\r\nimport * as React from \"react\";\r\nimport ReactSpeedometer from \"react-d3-speedometer\";\r\nimport Wad from 'web-audio-daw';\r\n\r\n\r\n\r\nfunction Tuner(){\r\n    // let constraintObj = {\r\n    //     audio: true,\r\n    //     video: false,\r\n    // };\r\n    // const audio = document.getElementById('audio');\r\n    // function mic(){\r\n    //     navigator.mediaDevices.getUserMedia(constraintObj)\r\n    //     .then(function(mediaStream))\r\n    \r\n    const [frequencyValue, setFrequencyValue] = React.useState(440);\r\n    const [states, setStates] = React.useState(0);\r\n    const [currentNote, setNote] = React.useState(\"A\");\r\n\r\n    function vTuner(){\r\n        var audioContext = new AudioContext();\r\n        var microphone;\r\n        setStates(1);\r\n        var analyser = audioContext.createAnalyser();\r\n        var voice = new Wad({source : 'mic' });\r\n        var tune = new Wad.Poly();\r\n\r\n\r\n        \r\n    if (navigator.mediaDevices.getUserMedia) {\r\n        console.log('getUserMedia supported.');\r\n        var constraints = { audio: true }\r\n        navigator.mediaDevices.getUserMedia(constraints)\r\n            .then(function(stream) {\r\n                microphone = audioContext.createMediaStreamSource(stream);\r\n                microphone.connect(analyser);\r\n                //analyser.connect(audioContext.destination);\r\n                beginRecording();\r\n            })\r\n            .catch(function(err) {\r\n                console.error('error: ' + err);\r\n            })\r\n    } else {\r\n        console.error('getUserMedia unsupported by browser');\r\n    }\r\n\r\n    function beginRecording() {\r\n\r\n        \r\n        \r\n\r\n        analyser.fftSize = 2048; // power of 2, between 32 and max unsigned integer\r\n        var bufferLength = analyser.fftSize;\r\n\r\n        var freqBinDataArray = new Uint8Array(bufferLength);\r\n\r\n        var checkAudio = function() {\r\n        analyser.getByteFrequencyData(freqBinDataArray);\r\n        \r\n\r\n        var index = getIndexOfMax(freqBinDataArray)\r\n        var frequency =  ((index)*((audioContext.sampleRate/2)/ analyser.fftSize))\r\n\r\n        var musicNote = calculateNote(frequency)\r\n        if (musicNote == undefined){\r\n            setNote(\"...\");\r\n        }\r\n        else{\r\n            setNote(musicNote);\r\n        }\r\n\r\n        // console.log('current Note: ' + musicNote);\r\n\r\n        tune.add(voice);\r\n        tune.updatePitch();\r\n        // console.log(tune.pitch);\r\n\r\n        var roundFrequency = frequency.toFixed(1);\r\n        setFrequencyValue(roundFrequency);\r\n        // console.log('Freq Bin: ' + frequency);\r\n        //console.log(freqBinDataArray);\r\n        }\r\n\r\n        setInterval(checkAudio, 64);\r\n    }\r\n\r\n    function getRMS(spectrum) {\r\n        var rms = 0;\r\n        for (var i = 0; i < spectrum.length; i++) {\r\n            rms += spectrum[i] * spectrum[i];\r\n        }\r\n        rms /= spectrum.length;\r\n        rms = Math.sqrt(rms);\r\n        return rms;\r\n    }\r\n\r\n    function getIndexOfMax(array) {\r\n        return array.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);\r\n    }\r\n\r\n    function calculateNote(frequency){\r\n        // https://en.wikipedia.org/wiki/Pitch_(music) Formula for Pitches\r\n        var noteStrings = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];  \r\n        var noteNum = 12 * (Math.log( frequency / 440 )/Math.log(2) );\r\n        var note = Math.round( noteNum ) + 69;\r\n        return noteStrings[note%12]\r\n    }\r\n       \r\n\r\n    }\r\n    \r\n    \r\n\r\n    return(\r\n        <div className = \"tuner\">\r\n            <h4>Violin Tuner</h4>\r\n            <div className = \"gauge\">\r\n            <ReactSpeedometer\r\n                value={frequencyValue}\r\n                maxValue={880}\r\n                minValue={0}\r\n                currentValueText={'Frequency: ${value}'}\r\n                customSegmentStops={[0, 196, 293, 440, 659, 880]}\r\n                needleTransition =\"easeElasticOut\"\r\n                needleTransitionDuration={3000}\r\n                needleHeightRatio={0.7}\r\n                \r\n                 />\r\n            </div>\r\n            <p>Current Note: {currentNote}</p>\r\n            \r\n            \r\n            <button onClick={vTuner} className = \"start\" style={{visibility: states == 0 ? 'visible' : 'hidden' }}>Start</button>\r\n        </div>\r\n        \r\n    )\r\n    \r\n}\r\n\r\nexport default Tuner;","import React from 'react';\nimport logo from './logo.svg';\nimport Tuner from './Tuner';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        \n        <Tuner />\n        {/* <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}